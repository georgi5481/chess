cmake_minimum_required(VERSION 3.5.1)

include(${CMAKE_CURRENT_SOURCE_DIR}/cmake_helpers/helpers.cmake)

set(CMAKE_MODULE_PATH 
	${CMAKE_MODULE_PATH} ${CMAKE_MODULE_PATH}/cmake_helpers/find_modules)

project(Buttons_and_timers LANGUAGES CXX)	#first instance the project and the language

if(UNIX)
	set(SDL2_image_name SDL2_image)
	set(SDL2_ttf_name SDL2_ttf)
	set(SDL2_mixer_name SDL2_mixer)
elseif(WIN32 OR APPLE)
	set(SDL2_image_name SDL2_IMAGE)
	set(SDL2_ttf_name SDL2_TTF)
	set(SDL2_mixer_name SDL2_MIXER)
endif()

	find_package(SDL2 REQUIRED)					#first one doesnt need to change
	find_package(${SDL2_image_name} REQUIRED)	#using the three variables we just used and set
	find_package(${SDL2_ttf_name} REQUIRED)
	find_package(${SDL2_mixer_name} REQUIRED)

set(_BASE_DIR ${CMAKE_CURRENT_SOURCE_DIR})	#set _BASE_DIR as a variable to be set to the current path
set(_INC_DIR ${_BASE_DIR}/include)
set(_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src)	

add_executable(
	${PROJECT_NAME} 	
	${_INC_DIR}/common/commonDefines.h

	${_INC_DIR}/Engine/Engine.h
	${_INC_DIR}/Engine/config/EngineConfig.h
	${_INC_DIR}/Engine/EngineConfigLoader.h
	${_INC_DIR}/Game/Game.h
	${_INC_DIR}/Game/config/GameCfg.h
	${_INC_DIR}/Game/entities/Hero.h
	${_INC_DIR}/Game/entities/Wheel.h
	${_INC_DIR}/Game/proxies/GameProxy.h
	${_INC_DIR}/Game/buttons/WheelButton.h
	
	${_SRC_DIR}/Engine/Engine.cpp
	${_SRC_DIR}/Game/entities/Hero.cpp
	${_SRC_DIR}/Game/entities/Wheel.cpp
	${_SRC_DIR}/Engine/EngineConfigLoader.cpp 
	${_SRC_DIR}/Game/Game.cpp
	${_SRC_DIR}/Game/buttons/WheelButton.cpp
		
	${_BASE_DIR}/main.cpp
	)

set_target_cpp_standard( ${PROJECT_NAME} 17)
enable_target_warnings(${PROJECT_NAME})

target_include_directories(
${PROJECT_NAME} 
	PRIVATE 
		${_BASE_DIR}		#we include the directory we want to scan/obtain with the cmake and the cpp files
)
target_link_libraries(
${PROJECT_NAME} 
	PUBLIC 
		manager_utils 	#our binary will link to manager_utils that will link all the other libraries

)

if(CMAKE_BUILD_TYPE MATCHES Release)
	target_compile_definitions(
		${PROJECT_NAME}
		PRIVATE
		-DRELEASE_BUILD=1
	)

#this is a bash script for copying the resource folder
add_custom_command(
	TARGET ${PROJECT_NAME} POST_BUILD
		COMMAND ${CMAKE_COMMAND} -E copy_directory
		${CMAKE_CURRENT_SOURCE_DIR}/resources/
		$<TARGET_FILE_DIR:${PROJECT_NAME}>/resources/
)
endif()

add_subdirectory(utils)	#we will import the directory and we will inherit there our variables made here
add_subdirectory(sdl_utils)
add_subdirectory(manager_utils) #we add the NAME OF THE FOLDER!!! (not the executable in the cmake file)

